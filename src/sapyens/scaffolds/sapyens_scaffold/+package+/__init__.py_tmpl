from pyramid.config import Configurator
from sqlalchemy import engine_from_config
import {{package}}.db
import pyramid.session
import pyramid.authorization
import pyramid.authentication
import pyramid.security
import sapyens.views
import sapyens.helpers
#import sapyens.crud


class RootFactory (object):
    __acl__ = [
        (pyramid.security.Allow, 'group:admin', pyramid.security.ALL_PERMISSIONS),
    ]

    def __init__ (self, request):
        pass


def main (global_config, **settings):
    sapyens.helpers.set_utc_timezone()

    engine = engine_from_config(settings, 'sqlalchemy.')
    {{package}}.db.init(engine, settings)

    config = Configurator(
        settings = settings,
        root_factory = RootFactory,
        session_factory = pyramid.session.UnencryptedCookieSessionFactoryConfig(
            settings.get('session.secret', 'test'),
            cookie_name = settings.get('session.cookie.name', 's'),
            timeout = 60*60*24*3,
            cookie_max_age = 60*60*24*3,
        ),
        authentication_policy = pyramid.authentication.SessionAuthenticationPolicy(
            prefix = 'auth.',
            callback = simple_group_finder,
            debug = False,
        ),
        authorization_policy = pyramid.authorization.ACLAuthorizationPolicy(),
    )

    config.add_static_view('static', 'static', cache_max_age = 3600)

    #sapyens.views.LoginView.include_to_config(config)
    #sapyens.views.LogoutView.include_to_config(config)

    config.scan()

    app = config.make_wsgi_app()

    # Now (as late as possible) clean anything (e.g. sockets) that must not be shared after
    # the WSGI server (like gunicorn with preload_app) forks

    # Recreate SQLAlchemy connection pool to close any left connections (e.g. after reflection)
    {{package}}.db.DBSession.remove()
    engine.dispose()

    return app

def simple_group_finder (userid, request):
    return ['group:admin'] if userid == 'admin' else None
